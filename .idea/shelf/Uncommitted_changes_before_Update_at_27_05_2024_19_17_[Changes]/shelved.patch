Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from gui.main_view import MainView\r\n\r\nmain_view = MainView()\r\nmain_view.servable()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision c60581af2b065e33674438d58d49b642153cfc63)
+++ b/app.py	(date 1716487377154)
@@ -1,4 +1,4 @@
 from gui.main_view import MainView
 
 main_view = MainView()
-main_view.servable()
\ No newline at end of file
+main_view.servable()
Index: analysis/preprocessing.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Script für das Preprocessing. Beispiel Auswahl der Kanäle oder ähnliches.\r\nimport h5py\r\nimport numpy as np\r\n\r\nclass Preprocess:\r\n\r\n    def __init__(self,file_path):\r\n\r\n        self.current_file = file_path\r\n        self.channel_count = None\r\n        self.channel_size = None\r\n        self.selected_channel_data = None\r\n        self.data = None\r\n\r\n    def get_channel_data(self, channel):\r\n        with h5py.File(self.current_file, 'r') as file:\r\n            data = np.array(file['time_data'][:])[:, channel]\r\n        return data\r\n\r\n    def get_channel_size(self, channel):\r\n        with h5py.File(self.current_file, 'r') as file:\r\n            size = np.array(file['time_data'][:])[:, channel].shape[0]\r\n        return size\r\n\r\n    def get_channel_count(self):\r\n        # Erstelle ein file-like object aus den Bytes\r\n        with h5py.File(self.current_file, 'r') as file:\r\n            # Zugriff auf den gewünschten Datensatz\r\n            count = np.array(file['time_data'][:]).shape[1]\r\n            # Die Anzahl der Kanäle (zweite Dimension der Daten)\r\n        return count\r\n\r\n    def get_abtastrate(self):\r\n        # Muss noch befüllt werden. Vermutlich bietet Acourlar hier eine Funktion oder es kann aus dem Datenset gelesen\r\n        # gelesen werden\r\n        return None\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/analysis/preprocessing.py b/analysis/preprocessing.py
--- a/analysis/preprocessing.py	(revision c60581af2b065e33674438d58d49b642153cfc63)
+++ b/analysis/preprocessing.py	(date 1716489992394)
@@ -1,10 +1,10 @@
-#Script für das Preprocessing. Beispiel Auswahl der Kanäle oder ähnliches.
+# Script für das Preprocessing. Beispiel Auswahl der Kanäle oder ähnliches.
 import h5py
 import numpy as np
 
 class Preprocess:
 
-    def __init__(self,file_path):
+    def __init__(self, file_path):
 
         self.current_file = file_path
         self.channel_count = None
@@ -31,6 +31,6 @@
         return count
 
     def get_abtastrate(self):
-        # Muss noch befüllt werden. Vermutlich bietet Acourlar hier eine Funktion oder es kann aus dem Datenset gelesen
+        # Muss noch befüllt werden. Vermutlich bietet Acourlar hier eine Funktion oder es kann aus dem Datenset
         # gelesen werden
-        return None
+        return None
\ No newline at end of file
Index: analysis/import.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Script fürs Importieren
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/analysis/import.py b/analysis/import.py
--- a/analysis/import.py	(revision c60581af2b065e33674438d58d49b642153cfc63)
+++ b/analysis/import.py	(date 1716489531289)
@@ -1,1 +1,3 @@
-# Script fürs Importieren
\ No newline at end of file
+# Script fürs Importieren
+# Browser kann nur Binäry files lesen und keine reinen Pfade.
+# Funktion von Binäry -> File.
\ No newline at end of file
